# Copyright 2016 United States Government as represented by the Administrator
# of the National Aeronautics and Space Administration. All Rights Reserved.
#
# Portion of this code is Copyright Geoscience Australia, Licensed under the
# Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License
# at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# The CEOS 2 platform is licensed under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

from django.db import models
from django.core.exceptions import ValidationError

import datetime
import uuid


class Metadata(models.Model):
    """Base Metadata model meant to be inherited by a TaskClass

    Serves as the base of all algorithm metadata, containing basic fields such as scene
    count, pixel count, clean pixel statistics. Comma seperated fields are also used here
    and zipped/fetched using the get_field_as_list function.

    Constraints:
        All fields excluding primary key are unique together.
        all fields are optional and will be replaced with valid values when they
            are generated by the task.

    Usage:
        In each app, subclass Metadata and add all fields (if desired).
        Subclass Meta as well to ensure the class remains abstract e.g.
            class AppMetadata(Metadata):
                sample_field = models.CharField(max_length=100)

                class Meta(Metadata.Meta):
                    pass

    """

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=True)

    #meta attributes
    scene_count = models.IntegerField(default=0)
    pixel_count = models.IntegerField(default=0)
    clean_pixel_count = models.IntegerField(default=0)
    percentage_clean_pixels = models.FloatField(default=0)
    # comma seperated dates representing individual acquisitions
    # followed by comma seperated numbers representing pixels per scene.
    acquisition_list = models.CharField(max_length=100000, default="")
    clean_pixels_per_acquisition = models.CharField(max_length=100000, default="")
    clean_pixel_percentages_per_acquisition = models.CharField(max_length=100000, default="")

    zipped_metadata_fields = None

    class Meta:
        abstract = True

    def _get_field_as_list(self, field_name):
        """Convert comma seperated strings into lists

        Certain metadata fields are stored as comma seperated lists of properties.
        Use this function to get the string, split on comma, and return the result.

        Args:
            field_name: field name as a string that should be converted

        Returns:
            List of attributes
        """
        return getattr(self, field_name).rstrip(',').split(',')

    def get_zipped_fields_as_list(self):
        """Creates a zipped iterable comprised of all the fields in self.zipped_metadata_fields

        Using _get_field_as_list converts the comma seperated fields in fields
        and zips them to iterate. Used to display grouped metadata, generally by
        acquisition date.

        Args:
            fields: iterable of comma seperated fields that should be grouped.

        Returns:
            zipped iterable containing grouped fields generated using _get_field_as_list
        """
        if self.zipped_metadata_fields is None:
            raise NotImplementedError("You must define zipped_metadata_fields in all classes that extend Metadata.")
        fields_as_lists = [self._get_field_as_list(field) for field in self.zipped_metadata_fields]
        return zip(*fields_as_lists)
