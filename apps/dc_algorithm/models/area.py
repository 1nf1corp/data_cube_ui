# Copyright 2016 United States Government as represented by the Administrator
# of the National Aeronautics and Space Administration. All Rights Reserved.
#
# Portion of this code is Copyright Geoscience Australia, Licensed under the
# Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License
# at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# The CEOS 2 platform is licensed under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

from django.db import models
from django.core.exceptions import ValidationError

import datetime
import uuid


class Area(models.Model):
    """Stores an area corresponding to an area that has been ingested into the Data Cube.

    Areas define geographic regions that exist in a Data Cube. Attributes define the geographic range,
    imagery to use for the map view, and the satellites that we have acquired data for over the area.

    Attributes:
        id: This should correspond with a Data Cube product. The area id is combined
            with a satellite id to create a product id used to query the Data Cube for data.
            e.g. colombia, vietnam, australia will be used to create ls5_ledaps_colombia etc.
        name: Human readable name for the area
        latitude/longitude min/max: These bounds define the valid data region in the Data Cube.
            e.g. enter the bounds generated by get_datacube_metadata - this is used to create an outline on the map
            highlighting valid data.
        main_imagery: Path to an image to use as the globe imagery - it should be relatively high resolution if its a real image.
            The image at the entered path will be overlaid on the globe from [-180,180] longitude and [-90, 90] latitude.
            Defaults to black.png which is just a black background for the entire globe.
        detail_imagery: Path to an image to use as the base for our valid data region. This should be as close to the latitude/longitude
            min/max bounds as possible.
        thumbnail_imagery: path to an image to be used as a small icon on the region selection page.
        detail latitude/longitude min/max: These bounds should correspond to the actual bounds of the detail imagery. This is used to overlay
            the detail imagery on the globe just in case your detail image doesn't exactly match up with the valid data region.
        satellites: M2M field describing the satellites that we have data for over any given region. Only select satellites that the Data Cube
            has data ingested for - e.g. if we only have S1 over vietnam, we would leave colombia and australia unchecked.

    """

    id = models.CharField(max_length=250, default="", unique=True, primary_key=True)
    name = models.CharField(max_length=250, default="")

    latitude_min = models.FloatField(default=0)
    latitude_max = models.FloatField(default=0)
    longitude_min = models.FloatField(default=0)
    longitude_max = models.FloatField(default=0)

    main_imagery = models.CharField(max_length=250, default="/static/assets/images/black.png")
    detail_imagery = models.CharField(max_length=250, default="")
    thumbnail_imagery = models.CharField(max_length=250, default="")

    detail_latitude_min = models.FloatField(default=0)
    detail_latitude_max = models.FloatField(default=0)
    detail_longitude_min = models.FloatField(default=0)
    detail_longitude_max = models.FloatField(default=0)

    satellites = models.ManyToManyField(Satellite)

    def __str__(self):
        return self.id
